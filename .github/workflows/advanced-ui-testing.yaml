name: Advanced Selenium UI Tests

on:
  pull_request:
    branches:
      - master

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  selenium-matrix-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, firefox]
        resolution: 
          - { name: 'desktop-full', width: 1920, height: 1080 }
          - { name: 'laptop', width: 1366, height: 768 }
          - { name: 'mobile', width: 375, height: 667 }
      fail-fast: false
    
    name: Test ${{ matrix.browser }} - ${{ matrix.resolution.name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: hamad-fyad/OllamaUITesting
        token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' 
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Chrome and ChromeDriver
      if: matrix.browser == 'chrome'
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -f install -y
        CHROME_VER=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
        wget https://chromedriver.storage.googleapis.com/${CHROME_VER}/chromedriver_linux64.zip
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/
        google-chrome --version
        chromedriver --version

    - name: Install Firefox and GeckoDriver
      if: matrix.browser == 'firefox'
      run: |
        sudo apt-get update
        sudo apt-get install -y wget tar
        # Download latest Firefox tarball directly
        FIREFOX_VER=$(curl -s https://download.mozilla.org/?product=firefox-latest-ssl&os=linux64&lang=en-US | grep -oP 'firefox-\d+\.\d+(\.\d+)?\.tar.bz2' | head -1)
        wget "https://ftp.mozilla.org/pub/firefox/releases/latest/linux-x86_64/en-US/firefox-$(basename $FIREFOX_VER)" -O firefox.tar.bz2
        tar xjf firefox.tar.bz2
        sudo mv firefox /opt/firefox
        sudo ln -s /opt/firefox/firefox /usr/local/bin/firefox
        # Download latest GeckoDriver
        GECKO_VER=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
        wget https://github.com/mozilla/geckodriver/releases/download/v$GECKO_VER/geckodriver-v$GECKO_VER-linux64.tar.gz
        tar -xzf geckodriver-v$GECKO_VER-linux64.tar.gz
        sudo mv geckodriver /usr/local/bin/
        firefox --version
        geckodriver --version


    - name: Run Selenium tests
      env:
        HEADLESS: true
        BROWSER: ${{ matrix.browser }}
        SCREEN_WIDTH: ${{ matrix.resolution.width }}
        SCREEN_HEIGHT: ${{ matrix.resolution.height }}
        OLLAMA_URL: http://54.246.63.185:3000/
        TEST_NAME: ${{ matrix.browser }}-${{ matrix.resolution.name }}
      run: |
        pytest tests/ -v --tb=short

    - name: Upload Allure results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-${{ matrix.browser }}-${{ matrix.resolution.name }}
        path: allure-results/
        retention-days: 30

  allure-report:
    runs-on: ubuntu-latest
    needs: selenium-matrix-tests
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: allure-results-downloaded
          merge-multiple: false

      - name: Merge all results into single directory
        run: |
          mkdir -p allure-results
          for dir in allure-results-downloaded/*/; do
            if [ -d "$dir" ]; then
              cp -r "$dir"* allure-results/ 2>/dev/null || true
            fi
          done
          
      - name: Generate and Deploy Allure Report
        uses: simple-elf/allure-report-action@master
        with:
          allure_results: allure-results
          allure_report: allure-report
          gh_pages: gh-pages
          allure_history: allure-history
          keep_reports: 20
   
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}
          publish_dir: allure-history
